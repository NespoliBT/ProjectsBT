(()=>{var e={669:(e,n,t)=>{e.exports=t(609)},448:(e,n,t)=>{"use strict";var o=t(867),r=t(26),a=t(372),i=t(327),c=t(97),s=t(109),A=t(985),l=t(61);e.exports=function(e){return new Promise((function(n,t){var p=e.data,f=e.headers;o.isFormData(p)&&delete f["Content-Type"],(o.isBlob(p)||o.isFile(p))&&p.type&&delete f["Content-Type"];var u=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",C=unescape(encodeURIComponent(e.auth.password))||"";f.Authorization="Basic "+btoa(d+":"+C)}var m=c(e.baseURL,e.url);if(u.open(e.method.toUpperCase(),i(m,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,u.onreadystatechange=function(){if(u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))){var o="getAllResponseHeaders"in u?s(u.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:o,config:e,request:u};r(n,t,a),u=null}},u.onabort=function(){u&&(t(l("Request aborted",e,"ECONNABORTED",u)),u=null)},u.onerror=function(){t(l("Network Error",e,null,u)),u=null},u.ontimeout=function(){var n="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(l(n,e,"ECONNABORTED",u)),u=null},o.isStandardBrowserEnv()){var h=(e.withCredentials||A(m))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;h&&(f[e.xsrfHeaderName]=h)}if("setRequestHeader"in u&&o.forEach(f,(function(e,n){void 0===p&&"content-type"===n.toLowerCase()?delete f[n]:u.setRequestHeader(n,e)})),o.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),e.responseType)try{u.responseType=e.responseType}catch(n){if("json"!==e.responseType)throw n}"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){u&&(u.abort(),t(e),u=null)})),p||(p=null),u.send(p)}))}},609:(e,n,t)=>{"use strict";var o=t(867),r=t(849),a=t(321),i=t(185);function c(e){var n=new a(e),t=r(a.prototype.request,n);return o.extend(t,a.prototype,n),o.extend(t,n),t}var s=c(t(655));s.Axios=a,s.create=function(e){return c(i(s.defaults,e))},s.Cancel=t(263),s.CancelToken=t(972),s.isCancel=t(502),s.all=function(e){return Promise.all(e)},s.spread=t(713),e.exports=s,e.exports.default=s},263:e=>{"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},972:(e,n,t)=>{"use strict";var o=t(263);function r(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var t=this;e((function(e){t.reason||(t.reason=new o(e),n(t.reason))}))}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var e;return{token:new r((function(n){e=n})),cancel:e}},e.exports=r},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,n,t)=>{"use strict";var o=t(867),r=t(327),a=t(782),i=t(572),c=t(185);function s(e){this.defaults=e,this.interceptors={request:new a,response:new a}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=c(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=[i,void 0],t=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){n.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){n.push(e.fulfilled,e.rejected)}));n.length;)t=t.then(n.shift(),n.shift());return t},s.prototype.getUri=function(e){return e=c(this.defaults,e),r(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},o.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(n,t){return this.request(c(t||{},{method:e,url:n}))}})),o.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(n,t,o){return this.request(c(o||{},{method:e,url:n,data:t}))}})),e.exports=s},782:(e,n,t)=>{"use strict";var o=t(867);function r(){this.handlers=[]}r.prototype.use=function(e,n){return this.handlers.push({fulfilled:e,rejected:n}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=r},97:(e,n,t)=>{"use strict";var o=t(793),r=t(303);e.exports=function(e,n){return e&&!o(n)?r(e,n):n}},61:(e,n,t)=>{"use strict";var o=t(481);e.exports=function(e,n,t,r,a){var i=new Error(e);return o(i,n,t,r,a)}},572:(e,n,t)=>{"use strict";var o=t(867),r=t(527),a=t(502),i=t(655);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=r(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),o.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||i.adapter)(e).then((function(n){return c(e),n.data=r(n.data,n.headers,e.transformResponse),n}),(function(n){return a(n)||(c(e),n&&n.response&&(n.response.data=r(n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},481:e=>{"use strict";e.exports=function(e,n,t,o,r){return e.config=n,t&&(e.code=t),e.request=o,e.response=r,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,n,t)=>{"use strict";var o=t(867);e.exports=function(e,n){n=n||{};var t={},r=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],c=["validateStatus"];function s(e,n){return o.isPlainObject(e)&&o.isPlainObject(n)?o.merge(e,n):o.isPlainObject(n)?o.merge({},n):o.isArray(n)?n.slice():n}function A(r){o.isUndefined(n[r])?o.isUndefined(e[r])||(t[r]=s(void 0,e[r])):t[r]=s(e[r],n[r])}o.forEach(r,(function(e){o.isUndefined(n[e])||(t[e]=s(void 0,n[e]))})),o.forEach(a,A),o.forEach(i,(function(r){o.isUndefined(n[r])?o.isUndefined(e[r])||(t[r]=s(void 0,e[r])):t[r]=s(void 0,n[r])})),o.forEach(c,(function(o){o in n?t[o]=s(e[o],n[o]):o in e&&(t[o]=s(void 0,e[o]))}));var l=r.concat(a).concat(i).concat(c),p=Object.keys(e).concat(Object.keys(n)).filter((function(e){return-1===l.indexOf(e)}));return o.forEach(p,A),t}},26:(e,n,t)=>{"use strict";var o=t(61);e.exports=function(e,n,t){var r=t.config.validateStatus;t.status&&r&&!r(t.status)?n(o("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},527:(e,n,t)=>{"use strict";var o=t(867);e.exports=function(e,n,t){return o.forEach(t,(function(t){e=t(e,n)})),e}},655:(e,n,t)=>{"use strict";var o=t(867),r=t(16),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,n){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var c,s={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=t(448)),c),transformRequest:[function(e,n){return r(n,"Accept"),r(n,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(i(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(i(n,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};o.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){s.headers[e]=o.merge(a)})),e.exports=s},849:e=>{"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),o=0;o<t.length;o++)t[o]=arguments[o];return e.apply(n,t)}}},327:(e,n,t)=>{"use strict";var o=t(867);function r(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var a;if(t)a=t(n);else if(o.isURLSearchParams(n))a=n.toString();else{var i=[];o.forEach(n,(function(e,n){null!=e&&(o.isArray(e)?n+="[]":e=[e],o.forEach(e,(function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),i.push(r(n)+"="+r(e))})))})),a=i.join("&")}if(a){var c=e.indexOf("#");-1!==c&&(e=e.slice(0,c)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},303:e=>{"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},372:(e,n,t)=>{"use strict";var o=t(867);e.exports=o.isStandardBrowserEnv()?{write:function(e,n,t,r,a,i){var c=[];c.push(e+"="+encodeURIComponent(n)),o.isNumber(t)&&c.push("expires="+new Date(t).toGMTString()),o.isString(r)&&c.push("path="+r),o.isString(a)&&c.push("domain="+a),!0===i&&c.push("secure"),document.cookie=c.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},985:(e,n,t)=>{"use strict";var o=t(867);e.exports=o.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function r(e){var o=e;return n&&(t.setAttribute("href",o),o=t.href),t.setAttribute("href",o),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=r(window.location.href),function(n){var t=o.isString(n)?r(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},16:(e,n,t)=>{"use strict";var o=t(867);e.exports=function(e,n){o.forEach(e,(function(t,o){o!==n&&o.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[o])}))}},109:(e,n,t)=>{"use strict";var o=t(867),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,a,i={};return e?(o.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),n=o.trim(e.substr(0,a)).toLowerCase(),t=o.trim(e.substr(a+1)),n){if(i[n]&&r.indexOf(n)>=0)return;i[n]="set-cookie"===n?(i[n]?i[n]:[]).concat([t]):i[n]?i[n]+", "+t:t}})),i):i}},713:e=>{"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},867:(e,n,t)=>{"use strict";var o=t(849),r=Object.prototype.toString;function a(e){return"[object Array]"===r.call(e)}function i(e){return void 0===e}function c(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==r.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function A(e){return"[object Function]"===r.call(e)}function l(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var t=0,o=e.length;t<o;t++)n.call(null,e[t],t,e);else for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.call(null,e[r],r,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===r.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isPlainObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===r.call(e)},isFile:function(e){return"[object File]"===r.call(e)},isBlob:function(e){return"[object Blob]"===r.call(e)},isFunction:A,isStream:function(e){return c(e)&&A(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var n={};function t(t,o){s(n[o])&&s(t)?n[o]=e(n[o],t):s(t)?n[o]=e({},t):a(t)?n[o]=t.slice():n[o]=t}for(var o=0,r=arguments.length;o<r;o++)l(arguments[o],t);return n},extend:function(e,n,t){return l(n,(function(n,r){e[r]=t&&"function"==typeof n?o(n,t):n})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},44:(e,n,t)=>{"use strict";t.d(n,{Z:()=>m});var o=t(15),r=t.n(o),a=t(645),i=t.n(a),c=t(667),s=t.n(c),A=t(777),l=t(56),p=t(541),f=i()(r()),u=s()(A.Z),d=s()(l.Z),C=s()(p.Z);f.push([e.id,"*{margin:0;padding:0;border:0;outline:none;box-sizing:border-box;font-weight:100;color:#e5e5e5}*::-webkit-scrollbar{width:10px}*::-webkit-scrollbar-track{background:none}*::-webkit-scrollbar-thumb{background:#dd83a0;border-radius:20px}body{background:#1b2128;font-family:DMSans}@font-face{font-family:NerdFont;src:url("+u+') format("truetype")}@font-face{font-family:Pacifico;src:url('+d+') format("truetype")}@font-face{font-family:DMSans;src:url('+C+') format("truetype")}*{margin:0;padding:0;border:0;outline:none;box-sizing:border-box;font-weight:100;color:#e5e5e5}*::-webkit-scrollbar{width:10px}*::-webkit-scrollbar-track{background:none}*::-webkit-scrollbar-thumb{background:#dd83a0;border-radius:20px}body{background:#1b2128;font-family:DMSans}@font-face{font-family:NerdFont;src:url('+u+') format("truetype")}@font-face{font-family:Pacifico;src:url('+d+') format("truetype")}@font-face{font-family:DMSans;src:url('+C+') format("truetype")}@keyframes openOverlay{0%{left:-100%}100%{left:0}}@keyframes closeOverlay{0%{left:0}100%{left:-100%}}.content{padding:30px}.content #projects{display:flex;justify-content:center;align-items:center;flex-wrap:wrap}.content #projects .project{transition:0.5s;height:210px;width:350px;background:#212931;border-radius:10px;margin:20px;overflow:hidden;display:flex;flex-direction:column;grid-template-columns:auto auto}.content #projects .project:hover{box-shadow:0px 0px 0px 5px #b877b4}.content #projects .project .header{grid-area:name;padding:15px;background:#63aec0;color:#1b2128;cursor:pointer}.content #projects .project .header .name{font-size:20px}.content #projects .project .header .technology{font-size:13px;color:#212931}.content #projects .project .header .technology:before{content:"#"}.content #projects .project .description{grid-area:description;overflow-y:scroll;padding:0px 5px;margin:10px}.content #addProject{transition:0.2s;background-color:#85ba86;height:50px;width:50px;display:flex;justify-content:center;align-items:center;font-size:30px;position:fixed;left:30px;bottom:30px;border-radius:100px;user-select:none;cursor:pointer;opacity:0.8;font-family:NerdFont}.content #addProject:hover{opacity:1;transform:scale(1.05)}.content #projectInfoOverlay,.content #newProjectOverlay{display:none;position:fixed;top:0;left:0;height:100%;width:100%;justify-content:center;align-items:center;backdrop-filter:blur(2px)}.content #projectInfoOverlay.open,.content #newProjectOverlay.open{display:flex;animation:openOverlay;animation-duration:0.5s}.content #projectInfoOverlay.close,.content #newProjectOverlay.close{animation:closeOverlay;animation-duration:0.5s}.content #projectInfoOverlay .projectInfo{display:flex;padding:40px;min-height:500px;background-color:#212931;position:relative;height:calc(100% - 80px);width:calc(100% - 80px);border-radius:10px}.content #projectInfoOverlay .projectInfo .left{min-width:40%;padding:20px;overflow-y:scroll}.content #projectInfoOverlay .projectInfo .left #projectName{font-size:40px;color:#63aec0;width:100%;font-family:Pacifico}.content #projectInfoOverlay .projectInfo .left #projectTechnology{font-size:25px;width:100%;margin:0 auto;border-bottom:2px dashed #b877b4;padding-bottom:20px;margin-top:5px}.content #projectInfoOverlay .projectInfo .left #projectTechnology:before{content:"#"}.content #projectInfoOverlay .projectInfo .left #projectDescription{font-size:20px;margin:20px auto}.content #projectInfoOverlay .projectInfo .left .actions{display:flex}.content #projectInfoOverlay .projectInfo .left .actions #edit,.content #projectInfoOverlay .projectInfo .left .actions #delete{transition:0.2s;padding:10px 20px;border-radius:100px;margin:0 10px;cursor:pointer;opacity:0.8;user-select:none}.content #projectInfoOverlay .projectInfo .left .actions #edit:hover,.content #projectInfoOverlay .projectInfo .left .actions #delete:hover{opacity:1;transform:scale(1.05)}.content #projectInfoOverlay .projectInfo .left .actions #edit{background:#63aec0}.content #projectInfoOverlay .projectInfo .left .actions #delete{background:#e25987}.content #projectInfoOverlay .projectInfo .left #credentials .db,.content #projectInfoOverlay .projectInfo .left #credentials .user{border-radius:10px;background:#1b2128;padding:20px}.content #projectInfoOverlay .projectInfo .left #credentials .db:before,.content #projectInfoOverlay .projectInfo .left #credentials .user:before{font-size:20px;color:#b877b4;font-weight:600;border-bottom:2px solid #b877b4;display:block;padding-bottom:10px;margin-bottom:10px}.content #projectInfoOverlay .projectInfo .left #credentials .db:before{content:"Database"}.content #projectInfoOverlay .projectInfo .left #credentials .user{margin-top:10px}.content #projectInfoOverlay .projectInfo .left #credentials .user:before{content:"Utente"}.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .username,.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .password,.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .ip{display:flex;align-items:center;padding:5px 0}.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .username:before,.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .password:before,.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .ip:before{font-family:NerdFont;color:#63aec0;font-weight:100;font-size:35px;margin-right:20px}.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .password:before{content:""}.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .username:before{content:""}.content #projectInfoOverlay .projectInfo .left #credentials .enviroment .ip:before{content:"歷"}.content #projectInfoOverlay .projectInfo .left #credentials .envName{color:#fec262;font-size:30px;font-weight:600;margin:20px 0 10px 0}.content #projectInfoOverlay .projectInfo .right{background:red}.content #projectInfoOverlay .projectInfo #closeProjectInfoOverlay{transition:0.2s;position:absolute;font-family:NerdFont;top:30px;right:20px;height:50px;width:50px;font-size:30px;display:flex;justify-content:center;align-items:center;background:#e25987;border-radius:50px;opacity:0.8;cursor:pointer}.content #projectInfoOverlay .projectInfo #closeProjectInfoOverlay:hover{opacity:1;transform:scale(1.05)}.content #newProjectOverlay #newProjectForm{display:grid;padding:40px;min-height:500px;background-color:#212931;grid-template-areas:"title title" "left right" "submit submit";grid-template-columns:40% 60%;height:calc(100% - 80px);width:calc(100% - 80px);border-radius:10px}.content #newProjectOverlay #newProjectForm h1{font-size:40px;margin-bottom:20px;grid-area:title}.content #newProjectOverlay #newProjectForm input,.content #newProjectOverlay #newProjectForm textarea,.content #newProjectOverlay #newProjectForm button{background:#1b2128;margin:10px 0;padding:15px;border-radius:10px;font-size:17px;width:100%}.content #newProjectOverlay #newProjectForm textarea{resize:none}.content #newProjectOverlay #newProjectForm button{grid-area:submit;transition:0.2s;cursor:pointer;background:#85ba86;color:#1b2128;font-size:20px;opacity:0.8;margin:0}.content #newProjectOverlay #newProjectForm button:hover{opacity:1;transform:scale(1.02)}.content #newProjectOverlay #newProjectForm .left{grid-area:left;margin:0 20px}.content #newProjectOverlay #newProjectForm .right{grid-area:right;overflow-y:scroll;margin:0 20px;background-color:#1b2128;padding:20px;height:95%;border-radius:10px}.content #newProjectOverlay #newProjectForm .right h2{color:#63aec0;font-size:30px;margin-bottom:20px}.content #newProjectOverlay #newProjectForm .right h3{color:#b877b4;font-size:20px;margin:20px 0 10px 0}.content #newProjectOverlay #newProjectForm .right h4{color:#dd83a0;font-size:15px;margin:20px 0 10px 0}.content #newProjectOverlay #newProjectForm .right input,.content #newProjectOverlay #newProjectForm .right textarea,.content #newProjectOverlay #newProjectForm .right button{background:#212931}.content #newProjectOverlay #newProjectForm #closeNewProjectOverlay{transition:0.2s;position:absolute;font-family:NerdFont;top:70px;right:70px;height:50px;width:50px;font-size:30px;display:flex;justify-content:center;align-items:center;background:#e25987;border-radius:50px;opacity:0.8;cursor:pointer}.content #newProjectOverlay #newProjectForm #closeNewProjectOverlay:hover{opacity:1;transform:scale(1.05)}\n',"",{version:3,sources:["webpack://./src/scss/variables.scss","webpack://./src/scss/animations.scss","webpack://./src/scss/index.scss"],names:[],mappings:"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",sourcesContent:['// Varibles\n$color_1: #1b2128;\n$color_2: #212931;\n$color_3: #dd83a0;\n$color_4: #63aec0;\n$color_5: #e25987;\n$color_6: #85ba86;\n$color_7: #b877b4;\n$color_8: #fec262;\n$color_9: #e5e5e5;\n\n* {\n  &::-webkit-scrollbar {\n    width: 10px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: none;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: $color_3;\n    border-radius: 20px;\n  }\n\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: none;\n  box-sizing: border-box;\n  font-weight: 100;\n  color: $color_9;\n}\n\nbody {\n  background: $color_1;\n  font-family: DMSans;\n}\n\n@font-face {\n  font-family: NerdFont;\n  src: url("../fonts/NerdFont.ttf") format("truetype");\n}\n\n@font-face {\n  font-family: Pacifico;\n  src: url("../fonts/Pacifico.ttf") format("truetype");\n}\n\n@font-face {\n  font-family: DMSans;\n  src: url("../fonts/DMSans.ttf") format("truetype");\n}\n','@import "./variables.scss";\n\n@keyframes openOverlay {\n  0% {\n    left: -100%;\n  }\n  100% {\n    left: 0;\n  }\n}\n\n@keyframes closeOverlay {\n  0% {\n    left: 0;\n  }\n  100% {\n    left: -100%;\n  }\n}\n','@import "./variables.scss";\n@import "./animations.scss";\n\n.content {\n  padding: 30px;\n\n  #projects {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n\n    .project {\n      transition: 0.5s;\n      height: 210px;\n      width: 350px;\n      background: $color_2;\n      border-radius: 10px;\n      margin: 20px;\n      overflow: hidden;\n      display: flex;\n      flex-direction: column;\n      grid-template-columns: auto auto;\n\n      &:hover {\n        box-shadow: 0px 0px 0px 5px $color_7;\n      }\n      .header {\n        grid-area: name;\n        padding: 15px;\n        background: $color_4;\n        color: $color_1;\n        cursor: pointer;\n\n        .name {\n          font-size: 20px;\n        }\n        .technology {\n          font-size: 13px;\n          color: $color_2;\n\n          &:before {\n            content: "#";\n          }\n        }\n      }\n      .description {\n        grid-area: description;\n        overflow-y: scroll;\n        padding: 0px 5px;\n        margin: 10px;\n      }\n    }\n  }\n\n  #addProject {\n    transition: 0.2s;\n    background-color: $color_6;\n    height: 50px;\n    width: 50px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 30px;\n    position: fixed;\n    left: 30px;\n    bottom: 30px;\n    border-radius: 100px;\n    user-select: none;\n    cursor: pointer;\n    opacity: 0.8;\n    font-family: NerdFont;\n\n    &:hover {\n      opacity: 1;\n      transform: scale(1.05);\n    }\n  }\n\n  #projectInfoOverlay,\n  #newProjectOverlay {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    backdrop-filter: blur(2px);\n  }\n\n  #projectInfoOverlay.open,\n  #newProjectOverlay.open {\n    display: flex;\n    animation: openOverlay;\n    animation-duration: 0.5s;\n  }\n\n  #projectInfoOverlay.close,\n  #newProjectOverlay.close {\n    animation: closeOverlay;\n    animation-duration: 0.5s;\n  }\n\n  #projectInfoOverlay {\n    .projectInfo {\n      display: flex;\n      padding: 40px;\n      min-height: 500px;\n      background-color: $color_2;\n      position: relative;\n      height: calc(100% - 80px);\n      width: calc(100% - 80px);\n\n      border-radius: 10px;\n\n      .left {\n        min-width: 40%;\n        padding: 20px;\n        overflow-y: scroll;\n\n        #projectName {\n          font-size: 40px;\n          color: $color_4;\n          width: 100%;\n          font-family: Pacifico;\n        }\n\n        #projectTechnology {\n          font-size: 25px;\n          width: 100%;\n          margin: 0 auto;\n          border-bottom: 2px dashed $color_7;\n          padding-bottom: 20px;\n          margin-top: 5px;\n\n          &:before {\n            content: "#";\n          }\n        }\n        #projectDescription {\n          font-size: 20px;\n          margin: 20px auto;\n        }\n\n        .actions {\n          display: flex;\n\n          #edit,\n          #delete {\n            transition: 0.2s;\n            padding: 10px 20px;\n            border-radius: 100px;\n            margin: 0 10px;\n            cursor: pointer;\n            opacity: 0.8;\n            user-select: none;\n\n            &:hover {\n              opacity: 1;\n              transform: scale(1.05);\n            }\n          }\n          #edit {\n            background: $color_4;\n          }\n          #delete {\n            background: $color_5;\n          }\n        }\n\n        #credentials {\n          .db,\n          .user {\n            border-radius: 10px;\n            background: $color_1;\n            padding: 20px;\n            &:before {\n              font-size: 20px;\n              color: $color_7;\n              font-weight: 600;\n              border-bottom: 2px solid $color_7;\n              display: block;\n              padding-bottom: 10px;\n              margin-bottom: 10px;\n            }\n          }\n\n          .db {\n            &:before {\n              content: "Database";\n            }\n          }\n\n          .user {\n            margin-top: 10px;\n            &:before {\n              content: "Utente";\n            }\n          }\n\n          .enviroment {\n            .username,\n            .password,\n            .ip {\n              display: flex;\n              align-items: center;\n              padding: 5px 0;\n\n              &:before {\n                font-family: NerdFont;\n                color: $color_4;\n                font-weight: 100;\n                font-size: 35px;\n                margin-right: 20px;\n              }\n            }\n\n            .password {\n              &:before {\n                content: "";\n              }\n            }\n\n            .username {\n              &:before {\n                content: "";\n              }\n            }\n\n            .ip {\n              &:before {\n                content: "歷";\n              }\n            }\n          }\n\n          .envName {\n            color: $color_8;\n            font-size: 30px;\n            font-weight: 600;\n            margin: 20px 0 10px 0;\n          }\n        }\n      }\n\n      .right {\n        background: red;\n      }\n\n      #closeProjectInfoOverlay {\n        transition: 0.2s;\n        position: absolute;\n        font-family: NerdFont;\n        top: 30px;\n        right: 20px;\n        height: 50px;\n        width: 50px;\n        font-size: 30px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background: $color_5;\n        border-radius: 50px;\n        opacity: 0.8;\n        cursor: pointer;\n\n        &:hover {\n          opacity: 1;\n          transform: scale(1.05);\n        }\n      }\n    }\n  }\n\n  #newProjectOverlay {\n    #newProjectForm {\n      display: grid;\n      padding: 40px;\n      min-height: 500px;\n      background-color: $color_2;\n\n      grid-template-areas:\n        "title title"\n        "left right"\n        "submit submit";\n\n      grid-template-columns: 40% 60%;\n\n      height: calc(100% - 80px);\n      width: calc(100% - 80px);\n\n      border-radius: 10px;\n\n      h1 {\n        font-size: 40px;\n        margin-bottom: 20px;\n        grid-area: title;\n      }\n      input,\n      textarea,\n      button {\n        background: $color_1;\n        margin: 10px 0;\n        padding: 15px;\n        border-radius: 10px;\n        font-size: 17px;\n        width: 100%;\n      }\n      textarea {\n        resize: none;\n      }\n      button {\n        grid-area: submit;\n        transition: 0.2s;\n        cursor: pointer;\n        background: $color_6;\n        color: $color_1;\n        font-size: 20px;\n        opacity: 0.8;\n        margin: 0;\n\n        &:hover {\n          opacity: 1;\n          transform: scale(1.02);\n        }\n      }\n\n      .left {\n        grid-area: left;\n        margin: 0 20px;\n      }\n\n      .right {\n        grid-area: right;\n        overflow-y: scroll;\n        margin: 0 20px;\n        background-color: $color_1;\n        padding: 20px;\n        height: 95%;\n        border-radius: 10px;\n\n        h2 {\n          color: $color_4;\n          font-size: 30px;\n          margin-bottom: 20px;\n        }\n\n        h3 {\n          color: $color_7;\n          font-size: 20px;\n          margin: 20px 0 10px 0;\n        }\n\n        h4 {\n          color: $color_3;\n          font-size: 15px;\n          margin: 20px 0 10px 0;\n        }\n\n        input,\n        textarea,\n        button {\n          background: $color_2;\n        }\n      }\n\n      #closeNewProjectOverlay {\n        transition: 0.2s;\n        position: absolute;\n        font-family: NerdFont;\n        top: 70px;\n        right: 70px;\n        height: 50px;\n        width: 50px;\n        font-size: 30px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background: $color_5;\n        border-radius: 50px;\n        opacity: 0.8;\n        cursor: pointer;\n\n        &:hover {\n          opacity: 1;\n          transform: scale(1.05);\n        }\n      }\n    }\n  }\n}\n'],sourceRoot:""}]);const m=f},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);o&&r[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},15:e=>{"use strict";function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}e.exports=function(e){var t,o,r=(o=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],o=!0,r=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(o=(i=c.next()).done)&&(t.push(i.value),!n||t.length!==n);o=!0);}catch(e){r=!0,a=e}finally{try{o||null==c.return||c.return()}finally{if(r)throw a}}return t}}(t,o)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),A="/*# ".concat(s," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([A]).join("\n")}return[a].join("\n")}},667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},541:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=t.p+"src/fonts/DMSans.ttf"},777:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=t.p+"src/fonts/NerdFont.ttf"},56:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});const o=t.p+"src/fonts/Pacifico.ttf"},379:(e,n,t)=>{"use strict";var o,r=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function i(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},o=[],r=0;r<e.length;r++){var c=e[r],s=n.base?c[0]+n.base:c[0],A=t[s]||0,l="".concat(s," ").concat(A);t[s]=A+1;var p=i(l),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(a[p].references++,a[p].updater(f)):a.push({identifier:l,updater:C(f,n),references:1}),o.push(l)}return o}function s(e){var n=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var a=t.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(e){n.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(n);else{var i=r(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var A,l=(A=[],function(e,n){return A[e]=n,A.filter(Boolean).join("\n")});function p(e,n,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=l(n,r);else{var a=document.createTextNode(r),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function f(e,n,t){var o=t.css,r=t.media,a=t.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var u=null,d=0;function C(e,n){var t,o,r;if(n.singleton){var a=d++;t=u||(u=s(n)),o=p.bind(null,t,a,!1),r=p.bind(null,t,a,!0)}else t=s(n),o=f.bind(null,t,n),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<t.length;o++){var r=i(t[o]);a[r].references--}for(var s=c(e,n),A=0;A<t.length;A++){var l=i(t[A]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}t=s}}}}},n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={id:o,exports:{}};return e[o](r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{"use strict";var e=t(379),n=t.n(e),o=t(44);n()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;var r=t(669),a=t.n(r);a().defaults.baseURL="http://localhost:41968";var i,c=function(e){return document.getElementById(e)},s=c("projectName"),A=c("projectTechnology"),l=c("projectDescription"),p=c("projectInfoOverlay"),f=c("credentials");function u(e){var n=e.className,t=void 0===n?"":n,o=e.id,r=void 0===o?"":o,a=e.content,i=void 0===a?"":a,c=document.createElement("div");return c.setAttribute("class",t),c.setAttribute("id",r),c.innerHTML=i,c}!function(e){function n(e){var n;s.innerHTML=e.name,A.innerHTML=e.technology,l.innerHTML=e.description,console.log(e),null===(n=e.enviroments)||void 0===n||n.map((function(e){console.log(e);var n=u({className:"enviroment"}),t=u({className:"envName",content:e.name}),o=u({className:"db"}),r=u({className:"credential username",content:e.db.user}),a=u({className:"credential password",content:e.db.password}),i=u({className:"credential ip",content:e.db.ip}),c=u({className:"user"}),s=u({className:"credential username",content:e.user.name}),A=u({className:"credential password",content:e.user.password});f.innerHTML="",o.append(r,a,i),c.append(s,A),n.append(t,o,c),f.append(n)})),p.classList.add("open")}function t(e){var t=u({className:"project"}),o=u({className:"header",id:e.id.toString()}),r=u({className:"name",content:e.name}),a=u({className:"technology",content:e.technology}),i=u({className:"description",content:e.description});return o.addEventListener("click",(function(){n(e)})),o.appendChild(r),o.appendChild(a),t.appendChild(o),t.appendChild(i),t}e.openProjectInfo=n,e.getProjects=function(){return new Promise((function(e,n){a().get("/projects").then((function(n){var t=n.data;e(t)})).catch((function(e){n(e)}))}))},e.createProjectElement=t,e.createProject=function(e){var n=e.name,o=e.technology,r=e.description,i=e.enviroments;return new Promise((function(e,c){a().post("/projects/new",{name:n,technology:o,description:r,enviroments:i}).then((function(n){var o=t(n.data);e(o)})).catch((function(e){c(e)}))}))}}(i||(i={}));var d=document.getElementsByClassName("content")[0],C=function(e,n){return void 0===n&&(n=d),n.querySelector(e)},m=C("#projects"),h=C("#addProject"),g=C("#newProjectForm"),y=C("#newProjectOverlay"),b=C("#projectInfoOverlay"),v=C("#closeNewProjectOverlay"),B=C("#closeProjectInfoOverlay"),x=C("#newProjectName"),j=C("#newProjectTechnology"),w=C("#newProjectDescription");i.getProjects().then((function(e){e.map((function(e){var n=i.createProjectElement(e);m.appendChild(n)}))})),h.addEventListener("click",(function(){y.classList.add("open")})),g.addEventListener("submit",(function(e){e.preventDefault();for(var n=x.value,t=j.value,o=w.value,r=[],a=0,c=Array.from(document.getElementsByClassName("enviromentCred"));a<c.length;a++){var s=c[a];console.log(s),console.log(s.querySelector(".dbUser"));var A=C(".dbUser",s),l=C(".dbPassword",s),p=C(".dbIP",s),f=C(".userName",s),u=C(".userPassword",s),d={name:"prod",db:{user:A.value,password:l.value,ip:p.value},user:{name:f.value,password:u.value}};r.push(d)}n&&(i.createProject({id:null,name:n,technology:t,description:o,enviroments:r}).then((function(e){m.appendChild(e)})),x.value=null,j.value=null,w.value=null)})),v.addEventListener("click",(function(){y.classList.add("close"),setTimeout((function(){y.classList.remove("open"),y.classList.remove("close")}),500)})),B.addEventListener("click",(function(){b.classList.add("close"),setTimeout((function(){b.classList.remove("open"),b.classList.remove("close")}),500)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,